!function(){"use strict";function t(t){if(isNaN(t)||t<0)return"00:00:00";const e=Math.floor(t),n=Math.floor(60*(t-e)),i=Math.floor(60*(60*(t-e)-n));return`${e.toString().padStart(2,"0")}:${n.toString().padStart(2,"0")}:${i.toString().padStart(2,"0")}`}function e(t,e,n){return(parseInt(t,10)||0)+(parseInt(e,10)||0)/60+(parseInt(n,10)||0)/3600}function n(t,e){return(t||0)+(e||0)/100}function i(t,e){return e<=0?0:t/e}function a(t){if(isNaN(t)||t<=0)return"0:00/km";const e=3600*t;return`${Math.floor(e/60)}:${Math.round(e%60).toString().padStart(2,"0")}/km`}function s(t,e){return(60*t+e)/3600}function l(t,e){const n=r(e.lat-t.lat),i=r(e.lon-t.lon),a=r(t.lat),s=r(e.lat),l=Math.sin(n/2)*Math.sin(n/2)+Math.sin(i/2)*Math.sin(i/2)*Math.cos(a)*Math.cos(s);return 6371*(2*Math.atan2(Math.sqrt(l),Math.sqrt(1-l)))}function r(t){return t*Math.PI/180}const o={gap:.07,tech:.03},c="trailSyncTrainingHistory";function d(){try{const t=localStorage.getItem(c);return t?JSON.parse(t):[]}catch(t){return console.error("Error reading training history from localStorage",t),[]}}const u="trailSyncShoes";function m(){const t=localStorage.getItem(u);return t?JSON.parse(t):[]}function h(t){localStorage.setItem(u,JSON.stringify(t))}function p(t,e){const n=m(),i=n.findIndex(e=>e.id===t);i>-1&&(n[i].currentMileage+=parseFloat(e),h(n))}const v="trailSyncDebriefs";function g(){const t=localStorage.getItem(v);return t?JSON.parse(t):[]}class y{constructor(){this.cacheDOMElements(),this.addEventListeners(),this.init()}init(){}cacheDOMElements(){this.modeCurrentBtn=document.getElementById("tpc-mode-current"),this.modeTargetBtn=document.getElementById("tpc-mode-target"),this.distanceInput=document.getElementById("tpc-distance"),this.inputTypeTimeBtn=document.getElementById("tpc-input-time"),this.inputTypePaceBtn=document.getElementById("tpc-input-pace"),this.timeGroup=document.getElementById("tpc-time-group"),this.paceGroup=document.getElementById("tpc-pace-group"),this.hoursInput=document.getElementById("tpc-hours"),this.minutesInput=document.getElementById("tpc-minutes"),this.secondsInput=document.getElementById("tpc-seconds"),this.paceMinInput=document.getElementById("tpc-pace-min"),this.paceSecInput=document.getElementById("tpc-pace-sec"),this.calculateBtn=document.getElementById("tpc-calculate"),this.basePaceOutput=document.getElementById("tpc-base-pace"),this.intervalDistInput=document.getElementById("tpc-interval-dist"),this.intervalRepsInput=document.getElementById("tpc-interval-reps"),this.intervalPaceOutput=document.getElementById("tpc-interval-pace"),this.intervalRecoveryOutput=document.getElementById("tpc-interval-recovery"),this.lsdDistInput=document.getElementById("tpc-lsd-dist"),this.lsdPaceOutput=document.getElementById("tpc-lsd-pace"),this.lsdRecoveryOutput=document.getElementById("tpc-lsd-recovery"),this.copyBtn=document.getElementById("copy-tpc-results")}addEventListeners(){this.inputTypeTimeBtn.addEventListener("click",()=>this.toggleInputType("time")),this.inputTypePaceBtn.addEventListener("click",()=>this.toggleInputType("pace")),this.calculateBtn.addEventListener("click",()=>this.calculateAndDisplay()),this.intervalDistInput.addEventListener("input",()=>this.calculateAndDisplay()),this.lsdDistInput.addEventListener("input",()=>this.calculateAndDisplay()),this.copyBtn&&this.copyBtn.addEventListener("click",()=>this.copyResults())}copyResults(){if("0:00/km"===this.basePaceOutput.textContent)return void alert("沒有結果可以複製。");const t=`\n訓練配速計算結果：\n- 基準配速: ${this.basePaceOutput.textContent}\n\n間歇跑 (Interval)\n- 趟數距離: ${this.intervalDistInput.value||"N/A"} m\n- 趟數: ${this.intervalRepsInput.value||"N/A"}\n- 建議配速: ${this.intervalPaceOutput.textContent}\n- 恢復跑: ${this.intervalRecoveryOutput.textContent}\n\n長距離慢跑 (LSD)\n- LSD 距離: ${this.lsdDistInput.value||"N/A"} km\n- 建議配速: ${this.lsdPaceOutput.textContent}\n- 恢復跑: ${this.lsdRecoveryOutput.textContent}\n        `.trim().replace(/^ +/gm,"");navigator.clipboard.writeText(t).then(()=>{alert("結果已複製到剪貼簿！")}).catch(t=>{console.error("無法複製文字: ",t),alert("複製失敗，請檢查瀏覽器權限。")})}toggleInputType(t){"time"===t?(this.timeGroup.style.display="block",this.paceGroup.style.display="none",this.inputTypeTimeBtn.classList.add("active"),this.inputTypePaceBtn.classList.remove("active")):(this.timeGroup.style.display="none",this.paceGroup.style.display="block",this.inputTypeTimeBtn.classList.remove("active"),this.inputTypePaceBtn.classList.add("active"))}calculateAndDisplay(){const t=parseFloat(this.distanceInput.value);let n;if(this.inputTypeTimeBtn.classList.contains("active")){n=e(parseInt(this.hoursInput.value)||0,parseInt(this.minutesInput.value)||0,parseInt(this.secondsInput.value)||0)}else{const e=parseInt(this.paceMinInput.value)||0,i=parseInt(this.paceSecInput.value)||0;if(t>0){n=s(e,i)*t}else n=0}if(!t||t<=0||!n||n<=0)return this.basePaceOutput.textContent="0:00/km",this.intervalPaceOutput.textContent="0:00/km",this.intervalRecoveryOutput.textContent="0:00/km",this.lsdPaceOutput.textContent="0:00/km",void(this.lsdRecoveryOutput.textContent="0:00/km");const i=parseFloat(this.intervalDistInput.value)||400,l=parseFloat(this.lsdDistInput.value)||20,r=function(t,e){return t<=0||e<=0?0:e/t}(t,n),o=function(t,e=400,n=20){if(t<=0)return{interval:0,lsd:0,recovery:0};let i=.95+.05*Math.log2(e/800);i=Math.max(.85,Math.min(1.05,i));let a=1.25+(n-20)/10*.025;return a=Math.max(1.2,Math.min(1.35,a)),{interval:t*i,lsd:t*a,recovery:1.35*t}}(r,i,l);this.basePaceOutput.textContent=a(r),this.intervalPaceOutput.textContent=a(o.interval),this.intervalRecoveryOutput.textContent=a(o.recovery),this.lsdPaceOutput.textContent=a(o.lsd),this.lsdRecoveryOutput.textContent=a(o.recovery)}}function I(t,e,n){return t<=0||e<=0||n<=0?0:t*Math.pow(n/e,1.06)}function f(t){const{baseRace:e,mainWorkout:n,warmup:i}=t,l=function(t){if(t<=0)return{I:0,T:0,M:0,E:0};const e=t+s(0,18),n=10*t,i=I(n,10,3)/3,a=I(n,10,42.195)/42.195;return{I:i,T:e,M:a,E:a+s(1,15)}}(e.timeInHours/e.distance);let r;switch(n.targetPace){case"I pace":r=l.I;break;case"T pace":r=l.T;break;case"M pace":r=l.M;break;default:r=l.E}const o=a(r),c={...n,pace:o},d=r+s(1,45),u=`${a(d+s(0,10))} - ${a(d-s(0,10))}`;let m,h;"distance"===i.type?(m=i.value,h=i.value*d*60):(h=i.value,m=i.value/60/d);const p={text:`${h.toFixed(0)} 分鐘 (約 ${m.toFixed(1)} 公里)`,pace:u,zone:"Zone 1-2",strides:"I pace"===n.targetPace?"4-6x100m strides":null},v=.7*h,g=d+s(0,10),y=v/60/g;return{warmup:p,main:c,cooldown:{text:`${v.toFixed(0)} 分鐘 (約 ${y.toFixed(1)} 公里)`,pace:a(g)},debug:{paceZones:l}}}class E{constructor(){this.cacheDOMElements(),this.generateBtn&&this.addEventListeners()}cacheDOMElements(){this.modeResultBtn=document.getElementById("plan-mode-result"),this.modeGoalBtn=document.getElementById("plan-mode-goal"),this.resultGroup=document.getElementById("plan-result-group"),this.goalGroup=document.getElementById("plan-goal-group"),this.resultDist=document.getElementById("plan-result-dist"),this.resultHours=document.getElementById("plan-result-hours"),this.resultMinutes=document.getElementById("plan-result-minutes"),this.resultSeconds=document.getElementById("plan-result-seconds"),this.goalDist=document.getElementById("plan-goal-dist"),this.goalHours=document.getElementById("plan-goal-hours"),this.goalMinutes=document.getElementById("plan-goal-minutes"),this.goalSeconds=document.getElementById("plan-goal-seconds"),this.mainType=document.getElementById("plan-main-type"),this.mainDetails=document.getElementById("plan-main-details"),this.mainPace=document.getElementById("plan-main-pace"),this.warmupTimeBtn=document.getElementById("plan-warmup-time"),this.warmupDistBtn=document.getElementById("plan-warmup-dist"),this.warmupValue=document.getElementById("plan-warmup-value"),this.warmupLabel=document.querySelector('label[for="plan-warmup-value"]'),this.generateBtn=document.getElementById("plan-generate-btn"),this.resWarmup=document.getElementById("plan-res-warmup"),this.resWarmupPace=document.getElementById("plan-res-warmup-pace"),this.resMainTitle=document.getElementById("plan-res-main-title"),this.resMainPace=document.getElementById("plan-res-main-pace"),this.resCooldown=document.getElementById("plan-res-cooldown"),this.resCooldownPace=document.getElementById("plan-res-cooldown-pace"),this.copyBtn=document.getElementById("copy-plan-results")}addEventListeners(){this.modeResultBtn.addEventListener("click",()=>this.toggleMode("result")),this.modeGoalBtn.addEventListener("click",()=>this.toggleMode("goal")),this.warmupTimeBtn.addEventListener("click",()=>this.toggleWarmupInput("time")),this.warmupDistBtn.addEventListener("click",()=>this.toggleWarmupInput("dist")),this.generateBtn.addEventListener("click",()=>this.calculateAndDisplay()),this.copyBtn&&this.copyBtn.addEventListener("click",()=>this.copyResults())}copyResults(){if("--"===this.resWarmup.textContent)return void alert("沒有課表可以複製。");const t=`\nTrailSync 課表建議：\n\n- 熱身: ${this.resWarmup.textContent}\n  ${this.resWarmupPace.textContent}\n\n- 主課表: ${this.resMainTitle.textContent}\n  ${this.resMainPace.textContent}\n\n- 緩和: ${this.resCooldown.textContent}\n  ${this.resCooldownPace.textContent}\n        `.trim().replace(/^ +/gm,"");navigator.clipboard.writeText(t).then(()=>{alert("課表已複製到剪貼簿！")}).catch(t=>{console.error("無法複製文字: ",t),alert("複製失敗，請檢查瀏覽器權限。")})}toggleMode(t){"result"===t?(this.resultGroup.style.display="block",this.goalGroup.style.display="none",this.modeResultBtn.classList.add("active"),this.modeGoalBtn.classList.remove("active")):(this.resultGroup.style.display="none",this.goalGroup.style.display="block",this.modeResultBtn.classList.remove("active"),this.modeGoalBtn.classList.add("active"))}toggleWarmupInput(t){"time"===t?(this.warmupLabel.textContent="時間 (分鐘) 或 距離 (公里)",this.warmupValue.placeholder="例如: 15 (分鐘)",this.warmupTimeBtn.classList.add("active"),this.warmupDistBtn.classList.remove("active")):(this.warmupLabel.textContent="距離 (公里) 或 時間 (分鐘)",this.warmupValue.placeholder="例如: 2 (公里)",this.warmupTimeBtn.classList.remove("active"),this.warmupDistBtn.classList.add("active"))}calculateAndDisplay(){let t={};if(this.modeResultBtn.classList.contains("active")?(t.distance=parseFloat(this.resultDist.value),t.timeInHours=e(this.resultHours.value,this.resultMinutes.value,this.resultSeconds.value)):(t.distance=parseFloat(this.goalDist.value),t.timeInHours=e(this.goalHours.value,this.goalMinutes.value,this.goalSeconds.value)),!t.distance||!t.timeInHours)return void alert("請輸入有效的比賽成績或目標時間。");const n={type:this.mainType.value,details:this.mainDetails.value,targetPace:this.mainPace.value},i={type:this.warmupTimeBtn.classList.contains("active")?"time":"distance",value:parseFloat(this.warmupValue.value)};if(!i.value)return void alert("請輸入有效的熱身時間或距離。");const a=f({baseRace:t,mainWorkout:n,warmup:i});this.resWarmup.textContent=a.warmup.text;let s=`配速: ${a.warmup.pace}`;a.warmup.strides&&(s+=` + ${a.warmup.strides}`),this.resWarmupPace.textContent=s,this.resMainTitle.textContent=`${a.main.type}: ${a.main.details}`,this.resMainPace.textContent=`配速: ${a.main.pace}`,this.resCooldown.textContent=a.cooldown.text,this.resCooldownPace.textContent=`配速: ${a.cooldown.pace}`}}class B{constructor(){this.editingDebriefId=null,this.cacheDOMElements(),this.addEventListeners(),this.loadShoes(),this.loadHistory(),this.intervalSetCounter=0,this.initializeDebriefCalendar(),this.trainingPaceCalculator=new y,this.trainingPlanUI=new E}cacheDOMElements(){this.routeNameInput=document.getElementById("route-name"),this.distanceInput=document.getElementById("distance"),this.elevationInput=document.getElementById("elevation"),this.targetHoursInput=document.getElementById("target-hours"),this.targetMinutesInput=document.getElementById("target-minutes"),this.targetSecondsInput=document.getElementById("target-seconds"),this.routeTypeSelect=document.getElementById("route-type"),this.altitudeInput=document.getElementById("altitude"),this.userTPaceInput=document.getElementById("user-t-pace"),this.ultraRaceCheckbox=document.getElementById("ultra-race-checkbox"),this.calculateBtn=document.getElementById("calculate-btn"),this.resultsPaneOnPage=document.getElementById("results-pane-onpage"),this.resDistanceDisplay=document.getElementById("res-distance"),this.resElevationDisplay=document.getElementById("res-elevation"),this.resTimeDisplay=document.getElementById("res-time"),this.ephDisplay=document.getElementById("eph"),this.exportCardBtn=document.getElementById("export-card-btn"),this.cardExporterContent=document.getElementById("card-exporter-content"),this.runShoeSelector=document.getElementById("run-shoe-selector"),this.intervalModeTimeBtn=document.getElementById("interval-mode-time"),this.intervalModePaceBtn=document.getElementById("interval-mode-pace"),this.intervalTimeInputs=document.getElementById("interval-time-inputs"),this.intervalPaceInputs=document.getElementById("interval-pace-inputs"),this.intervalDistanceInput=document.getElementById("interval-distance"),this.intervalCalculateBtn=document.getElementById("interval-calculate"),this.intervalResultsList=document.getElementById("interval-results-list"),this.intervalSetsContainer=document.getElementById("interval-sets-container"),this.addIntervalSetBtn=document.getElementById("add-interval-set-btn"),this.clearIntervalSetsBtn=document.getElementById("clear-interval-sets-btn"),this.intervalTotalDistanceDisplay=document.getElementById("interval-total-distance"),this.intervalTotalTimeDisplay=document.getElementById("interval-total-time"),this.intervalTargetPaceMin=document.getElementById("interval-target-pace-min"),this.intervalTargetPaceSec=document.getElementById("interval-target-pace-sec"),this.intervalPaceReps=document.getElementById("interval-pace-reps"),this.copyIntervalBtn=document.getElementById("copy-interval-results"),this.gapPaceInput=document.getElementById("gap-pace"),this.gapGradeInput=document.getElementById("gap-grade"),this.gapCalculateBtn=document.getElementById("gap-calculate"),this.gapResultDisplay=document.getElementById("gap-result"),this.treadmillSpeedInput=document.getElementById("treadmill-speed"),this.treadmillInclineInput=document.getElementById("treadmill-incline"),this.treadmillConvertBtn=document.getElementById("treadmill-convert"),this.equivalentPaceDisplay=document.getElementById("equivalent-pace"),this.flatPaceInput=document.getElementById("flat-pace-input"),this.reverseTreadmillInclineInput=document.getElementById("reverse-treadmill-incline"),this.reverseTreadmillConvertBtn=document.getElementById("reverse-treadmill-convert-btn"),this.treadmillSpeedResultDisplay=document.getElementById("treadmill-speed-result"),this.raceDistanceInput=document.getElementById("race-distance"),this.raceElevationGainInput=document.getElementById("race-elevation-gain"),this.raceElevationLossInput=document.getElementById("race-elevation-loss"),this.userEphInput=document.getElementById("user-eph"),this.racePredictBtn=document.getElementById("race-predict"),this.raceTimeDisplay=document.getElementById("race-time"),this.raceEpDisplay=document.getElementById("race-ep"),this.saveTrainingBtn=document.getElementById("save-training"),this.historyList=document.getElementById("history-list"),this.clearHistoryBtn=document.getElementById("clear-history"),this.shoeNameInput=document.getElementById("shoe-name"),this.shoeBrandInput=document.getElementById("shoe-brand"),this.shoeMileageInput=document.getElementById("shoe-mileage"),this.addShoeBtn=document.getElementById("add-shoe-btn"),this.shoeListContainer=document.getElementById("shoe-list"),this.debriefRaceNameInput=document.getElementById("debrief-race-name"),this.debriefDateInput=document.getElementById("debrief-date"),this.debriefActualTimeInput=document.getElementById("debrief-actual-time"),this.debriefMentalStateInput=document.getElementById("debrief-mental-state"),this.debriefNutritionInput=document.getElementById("debrief-nutrition"),this.debriefGearInput=document.getElementById("debrief-gear"),this.debriefSubmitBtn=document.getElementById("debrief-submit"),this.debriefCalendarContainer=document.getElementById("debrief-calendar"),this.refRaceDistInput=document.getElementById("ref-race-dist"),this.refRaceElevInput=document.getElementById("ref-race-elev"),this.refRaceTimeHInput=document.getElementById("ref-race-time-h"),this.refRaceTimeMInput=document.getElementById("ref-race-time-m"),this.refRaceTimeSInput=document.getElementById("ref-race-time-s"),this.trainDistInput=document.getElementById("train-dist"),this.trainElevInput=document.getElementById("train-elev"),this.calculateTrainingTimeBtn=document.getElementById("calculate-training-time-btn"),this.trainingTimeResultDisplay=document.getElementById("training-time-result"),this.refRaceEphResultDisplay=document.getElementById("ref-race-eph-result"),this.advancedStrategySection=document.getElementById("advanced-strategy-section"),this.climbingFactorInput=document.getElementById("climbing-factor"),this.descendingFactorInput=document.getElementById("descending-factor"),this.aidStationContainer=document.getElementById("aid-station-container"),this.addAidStationBtn=document.getElementById("add-aid-station-btn")}addEventListeners(){this.calculateBtn.addEventListener("click",()=>this.handleCalculation()),this.intervalCalculateBtn.addEventListener("click",()=>this.handleIntervalCalculation()),this.gapCalculateBtn.addEventListener("click",()=>this.handleGapCalculation()),this.treadmillConvertBtn.addEventListener("click",()=>this.handleTreadmillConversion()),this.racePredictBtn.addEventListener("click",()=>this.handleRacePrediction()),this.saveTrainingBtn.addEventListener("click",()=>this.saveCurrentTraining()),this.clearHistoryBtn.addEventListener("click",()=>this.clearHistory()),this.exportCardBtn.addEventListener("click",()=>this.handleExportCard()),this.addShoeBtn.addEventListener("click",()=>this.handleAddShoe()),this.debriefSubmitBtn.addEventListener("click",()=>this.handleDebriefSubmit()),this.addIntervalSetBtn.addEventListener("click",()=>this.addIntervalSetRow()),this.clearIntervalSetsBtn.addEventListener("click",()=>this.clearIntervalSets()),this.reverseTreadmillConvertBtn.addEventListener("click",()=>this.handleReverseTreadmillConversion()),this.calculateTrainingTimeBtn.addEventListener("click",()=>this.handleTrainingTimeCalculation()),this.copyIntervalBtn&&this.copyIntervalBtn.addEventListener("click",()=>this.handleCopyIntervalResults()),this.addAidStationBtn.addEventListener("click",()=>this.handleAddAidStation()),this.intervalModeTimeBtn.addEventListener("click",()=>this.switchIntervalMode("time")),this.intervalModePaceBtn.addEventListener("click",()=>this.switchIntervalMode("pace")),this.shoeListContainer.addEventListener("click",t=>{if(t.target&&t.target.classList.contains("shoe-delete-btn")){const e=t.target.dataset.id;this.handleDeleteShoe(e)}if(t.target&&t.target.classList.contains("shoe-add-mileage-btn")){const e=t.target.dataset.id;this.handleAddMileage(e)}if(t.target&&t.target.classList.contains("shoe-edit-btn")){const e=t.target.dataset.id;this.handleEditShoe(e)}}),this.debriefCalendarContainer.addEventListener("click",t=>{if(t.target&&t.target.classList.contains("debrief-delete-btn")){const e=t.target.dataset.id;this.handleDeleteDebrief(e)}if(t.target&&t.target.classList.contains("debrief-edit-btn")){const e=t.target.dataset.id;this.handleEditDebrief(e)}})}switchIntervalMode(t){"time"===t?(this.intervalModeTimeBtn.classList.add("active"),this.intervalModePaceBtn.classList.remove("active"),this.intervalTimeInputs.style.display="block",this.intervalPaceInputs.style.display="none"):(this.intervalModeTimeBtn.classList.remove("active"),this.intervalModePaceBtn.classList.add("active"),this.intervalTimeInputs.style.display="none",this.intervalPaceInputs.style.display="block"),this.clearIntervalSets()}handleCalculation(){const a=parseFloat(this.distanceInput.value)||0,s=parseFloat(this.elevationInput.value)||0,l=e(this.targetHoursInput.value,this.targetMinutesInput.value,this.targetSecondsInput.value),r=this.routeTypeSelect.value,o=parseFloat(this.altitudeInput.value)||0,c=this.ultraRaceCheckbox.checked;if(a<=0||l<=0)return void alert("請輸入有效的距離和時間。");const d=i(n(a,s),l),{finalEph:u}=function(t,e,n,i,a){const s={road:.92,fire_trail:1,technical:1.35,alpine:1.8}[n]||1,l=(i||0)>2e3?1+i/1e4:1;let r=1;return a&&e>2&&(r=1-Math.log10(e+1)/2,r=Math.max(.5,r)),{finalEph:t*s*l*r,terrainFactor:s,gravityFactor:l,fatigueFactor:r}}(d,l,r,o,c);this.resDistanceDisplay.textContent=`${a.toFixed(1)} km`,this.resElevationDisplay.textContent=`${s.toFixed(0)} m`,this.resTimeDisplay.textContent=t(l),this.ephDisplay.textContent=u.toFixed(1)}loadShoes(){const t=m();this.shoeListContainer.innerHTML="",this.runShoeSelector.innerHTML='<option value="">不指定</option>',0!==t.length?t.forEach(t=>{this.renderShoeCard(t),this.addShoeToSelector(t)}):this.shoeListContainer.innerHTML='<p class="history-empty">尚未加入任何跑鞋</p>'}renderShoeCard(t){const e=document.createElement("div");e.className="shoe-card",e.dataset.id=t.id;const n=Math.min(t.currentMileage/800*100,100);e.innerHTML=`\n            <div class="shoe-header">\n                <div>\n                    <h4 class="shoe-name">${t.name}</h4>\n                    <p class="shoe-brand">${t.brand}</p>\n                </div>\n                <div>\n                    <button class="shoe-edit-btn" data-id="${t.id}">編輯</button>\n                    <button class="shoe-delete-btn" data-id="${t.id}">&times;</button>\n                </div>\n            </div>\n            <div class="mileage-info">\n                <div class="mileage-bar-container"><div class="mileage-bar" style="width: ${n}%;"></div></div>\n                <p class="mileage-text">${t.currentMileage.toFixed(1)} / 800 km</p>\n                <button class="shoe-add-mileage-btn" data-id="${t.id}">新增里程</button>\n            </div>\n        `,this.shoeListContainer.appendChild(e)}addShoeToSelector(t){const e=document.createElement("option");e.value=t.id,e.textContent=`${t.name} (${t.brand})`,this.runShoeSelector.appendChild(e)}handleAddShoe(){const t=this.shoeNameInput.value.trim(),e=this.shoeBrandInput.value.trim(),n=parseFloat(this.shoeMileageInput.value)||0;t&&e?(!function(t){const e=m(),n={id:`shoe_${Date.now()}`,name:t.name,brand:t.brand,initialMileage:parseFloat(t.initialMileage)||0,currentMileage:parseFloat(t.initialMileage)||0,addedDate:(new Date).toISOString()};e.push(n),h(e)}({name:t,brand:e,initialMileage:n}),this.shoeNameInput.value="",this.shoeBrandInput.value="",this.shoeMileageInput.value="",this.loadShoes()):alert("請輸入跑鞋型號和品牌。")}handleDeleteShoe(t){confirm("您確定要刪除這雙跑鞋嗎？")&&(!function(t){let e=m();e=e.filter(e=>e.id!==t),h(e)}(t),this.loadShoes())}handleAddMileage(t){const e=prompt("請輸入本次新增里程（km）：");if(null===e)return;const n=parseFloat(e);isNaN(n)||n<=0?alert("請輸入正數！"):(p(t,n),this.loadShoes(),alert(`已為跑鞋新增 ${n.toFixed(1)} km！`))}handleEditShoe(t){const e=m(),n=e.find(e=>e.id===t);if(!n)return;const i=prompt("新名稱（留空保持原值）：",n.name),a=prompt("新品牌（留空保持原值）：",n.brand),s=prompt("目前累積里程（km，留空保持原值）：",n.currentMileage.toFixed(1));if(null===i&&null===a&&null===s)return;const l={name:(i||n.name).trim(),brand:(a||n.brand).trim(),currentMileage:parseFloat(s)||n.currentMileage};p(t,0);const r=e.findIndex(e=>e.id===t);e[r]={...e[r],...l},localStorage.setItem("shoes",JSON.stringify(e)),this.loadShoes(),alert("跑鞋資料已更新！")}handleDeleteDebrief(t){confirm("您確定要刪除這篇復盤日誌嗎？")&&(!function(t){let e=g();e=e.filter(e=>e.id!==t),localStorage.setItem(v,JSON.stringify(e))}(t),this.loadHistory(),this.initializeDebriefCalendar())}handleEditDebrief(t){const e=g().find(e=>e.id===t);e&&(this.debriefRaceNameInput.value=e.raceName,this.debriefDateInput.value=e.date,this.debriefActualTimeInput.value=e.actualTime,this.debriefMentalStateInput.value=e.mentalState,this.debriefNutritionInput.value=e.nutrition,this.debriefGearInput.value=e.gear,this.debriefSubmitBtn.textContent="更新復盤",this.editingDebriefId=t,this.debriefRaceNameInput.scrollIntoView({behavior:"smooth"}))}handleDebriefSubmit(){const t={raceName:this.debriefRaceNameInput.value.trim(),date:this.debriefDateInput.value,actualTime:this.debriefActualTimeInput.value.trim(),mentalState:this.debriefMentalStateInput.value.trim(),nutrition:this.debriefNutritionInput.value.trim(),gear:this.debriefGearInput.value.trim()};t.raceName&&t.date?(this.editingDebriefId?(!function(t,e){const n=g(),i=n.findIndex(e=>e.id===t);-1!==i&&(n[i]={...n[i],...e},localStorage.setItem(v,JSON.stringify(n)))}(this.editingDebriefId,t),alert("賽後復盤已更新！"),this.editingDebriefId=null,this.debriefSubmitBtn.textContent="提交復盤"):(!function(t){const e=g(),n={id:`debrief_${Date.now()}`,type:"debrief",...t,savedAt:(new Date).toISOString()};e.push(n),localStorage.setItem(v,JSON.stringify(e))}(t),alert("賽後復盤已提交！")),["raceName","date","actualTime","mentalState","nutrition","gear"].forEach(t=>this[`debrief${t.charAt(0).toUpperCase()+t.slice(1)}Input`].value=""),this.loadHistory(),this.initializeDebriefCalendar()):alert("請至少輸入賽事名稱和日期。")}loadHistory(){this.historyList.innerHTML="";const t=[...d(),...g()].sort((t,e)=>new Date(e.date)-new Date(t.date));0!==t.length?(t.forEach(t=>this.addHistoryEntryToDOM(t)),this.initializeDebriefCalendar()):this.historyList.innerHTML='<div class="history-empty">尚無歷史紀錄</div>'}initializeDebriefCalendar(){if(!this.debriefCalendarContainer)return;const t=g().sort((t,e)=>new Date(e.date)-new Date(t.date));this.debriefCalendarContainer.innerHTML="",0!==t.length?t.forEach(t=>{const e=document.createElement("details");e.className="debrief-item";const n=document.createElement("summary");n.className="debrief-summary",n.innerHTML=`<strong>${t.raceName}</strong> - <small>${new Date(t.date).toLocaleDateString("zh-Hant")}</small>`;const i=document.createElement("div");i.className="debrief-content",i.innerHTML=`\n                <p><strong>完賽時間:</strong> ${t.actualTime||"未記錄"}</p>\n                <p><strong>心態感受:</strong> ${t.mentalState||"未記錄"}</p>\n                <p><strong>補給策略:</strong> ${t.nutrition||"未記錄"}</p>\n                <p><strong>裝備表現:</strong> ${t.gear||"未記錄"}</p>\n                <div class="debrief-actions">\n                    <button class="btn btn-outline btn-small debrief-edit-btn" data-id="${t.id}">編輯</button>\n                    <button class="btn btn-danger btn-small debrief-delete-btn" data-id="${t.id}">刪除</button>\n                </div>\n            `,e.appendChild(n),e.appendChild(i),this.debriefCalendarContainer.appendChild(e)}):this.debriefCalendarContainer.innerHTML='<p class="history-empty">尚無復盤紀錄</p>'}addHistoryEntryToDOM(e){const n=this.historyList.querySelector(".history-empty");n&&n.remove();let i="";if("debrief"===e.type)i=`\n                <p class="history-date">${new Date(e.date).toLocaleDateString("zh-Hant")} - <strong>賽後復盤: ${e.raceName}</strong></p>\n                <div class="history-metrics">\n                    <div><p class="history-metric-name">完賽時間</p><p class="history-metric-value">${e.actualTime||"未記錄"}</p></div>\n                    <div><p class="history-metric-name">心態</p><p class="history-metric-value">${e.mentalState?"已記錄":"未記錄"}</p></div>\n                    <div><p class="history-metric-name">補給</p><p class="history-metric-value">${e.nutrition?"已記錄":"未記錄"}</p></div>\n                    <div><p class="history-metric-name">裝備</p><p class="history-metric-value">${e.gear?"已記錄":"未記錄"}</p></div>\n                </div>`;else{const n=m(),a=e.shoeId?n.find(t=>t.id===e.shoeId):null,s=a?a.name:"";i=`\n                <p class="history-date">${new Date(e.date).toLocaleDateString("zh-Hant")} - <strong>${e.name||"無標題"}</strong></p>\n                <div class="history-metrics">\n                    <div><p class="history-metric-name">距離</p><p class="history-metric-value">${e.distance} km</p></div>\n                    <div><p class="history-metric-name">爬升</p><p class="history-metric-value">${e.elevation} m</p></div>\n                    <div><p class="history-metric-name">時間</p><p class="history-metric-value">${t(e.time)}</p></div>\n                    <div><p class="history-metric-name">EPH</p><p class="metric-value">${e.eph.toFixed(1)}</p></div>\n                    ${s?`<div><p class="history-metric-name">跑鞋</p><p class="history-metric-value">${s}</p></div>`:""}\n                </div>`}const a=document.createElement("div");a.className="history-item",a.innerHTML=i,this.historyList.prepend(a)}addIntervalSetRow(){this.intervalSetCounter++;const t=document.createElement("div");t.className="form-group interval-set",t.innerHTML='\n            <label class="form-label">單趟間歇時間 (秒)</label>\n            <input type="number" class="form-control interval-seconds" placeholder="例如: 90">\n            <label class="form-label">次數</label>\n            <input type="number" class="form-control interval-count" placeholder="例如: 8">\n        ',this.intervalSetsContainer.appendChild(t)}clearIntervalSets(){this.intervalSetCounter=0;const t=this.intervalSetsContainer.querySelectorAll(".interval-set");t.forEach((t,e)=>{e>0&&t.remove()}),t[0]?.querySelectorAll("input").forEach(t=>t.value=""),this.intervalResultsList.innerHTML="",this.intervalTotalDistanceDisplay.textContent="0 km",this.intervalTotalTimeDisplay.textContent="00:00:00"}handleIntervalCalculation(){const e=parseFloat(this.intervalDistanceInput.value)||0;if(e<=0)return void(this.intervalResultsList.innerHTML='<p class="metric-name">請輸入有效的間歇距離</p>');const n=parseFloat(this.userTPaceInput.value)||0;let i=0,a=0;if(this.intervalResultsList.innerHTML="",this.intervalModeTimeBtn.classList.contains("active")){const t=[];if(this.intervalSetsContainer.querySelectorAll(".interval-set").forEach(e=>{const n=parseInt(e.querySelector(".interval-seconds").value,10),i=parseInt(e.querySelector(".interval-count").value,10);!isNaN(n)&&!isNaN(i)&&n>0&&i>0&&t.push({time:n,count:i})}),0===t.length)return void(this.intervalResultsList.innerHTML='<p class="metric-name">請輸入有效的間歇數據</p>');t.forEach((t,s)=>{const l=t.time/60/(e/1e3),r=Math.floor(l),o=Math.round(60*(l-r));let c="";var d,u;n>0&&(c=` (${(d=l,u=n,u<=0?0:u/d*100).toFixed(0)}% T-Pace)`),i+=e/1e3*t.count,a+=t.time*t.count,this.intervalResultsList.innerHTML+=`\n                    <div class="metric-item">\n                        <span class="metric-number">${String(s+1).padStart(2,"0")}</span>\n                        <div class="metric-content">\n                            <h3 class="metric-name">第 ${s+1} 組配速 (${t.count} 趟)</h3>\n                            <p class="metric-value">${r}:${String(o).padStart(2,"0")}/km${c}</p>\n                        </div>\n                    </div>`})}else{const t=parseInt(this.intervalTargetPaceMin.value,10)||0,n=parseInt(this.intervalTargetPaceSec.value,10)||0,s=parseInt(this.intervalPaceReps.value,10)||0;if(s<=0||t<=0&&n<=0)return void(this.intervalResultsList.innerHTML='<p class="metric-name">請輸入有效的目標配速和次數</p>');const l=(60*t+n)/1e3*e,r=Math.floor(l/60),o=Math.round(l%60);i=e/1e3*s,a=l*s,this.intervalResultsList.innerHTML=`\n                <div class="metric-item">\n                    <span class="metric-number">${String(s).padStart(2,"0")}</span>\n                    <div class="metric-content">\n                        <h3 class="metric-name">單趟時間 (${s} 趟)</h3>\n                        <p class="metric-value">${r}:${String(o).padStart(2,"0")}</p>\n                    </div>\n                </div>`}this.intervalTotalDistanceDisplay.textContent=`${i.toFixed(2)} km`,this.intervalTotalTimeDisplay.textContent=t(a/3600)}handleGapCalculation(){const t=parseFloat(this.gapPaceInput.value)||0,e=parseFloat(this.gapGradeInput.value)||0;if(t<=0)return;const n=((t,e,n=0)=>t*(1+e*o.gap)*(1+n*o.tech))(t,e),i=Math.floor(n),a=Math.round(60*(n-i));this.gapResultDisplay.textContent=`${i}:${String(a).padStart(2,"0")}/km`}handleTreadmillConversion(){const t=parseFloat(this.treadmillSpeedInput.value)||0,e=parseFloat(this.treadmillInclineInput.value)||0;if(t<=0)return;const n=function(t,e){return t<=0?0:60/t+.15*e}(t,e),i=Math.floor(n),a=Math.round(60*(n-i));this.equivalentPaceDisplay.textContent=`${i}:${String(a).padStart(2,"0")}/km`}handleReverseTreadmillConversion(){const t=parseFloat(this.flatPaceInput.value)||0,e=parseFloat(this.reverseTreadmillInclineInput.value)||0;if(t<=0)return void alert("請輸入有效的目標平路配速。");const n=function(t,e){return t<=0?0:60/(t-.15*e)}(t,e);this.treadmillSpeedResultDisplay.textContent=`${n.toFixed(1)} km/h`}handleRacePrediction(){const e=parseFloat(this.raceDistanceInput.value)||0,n=parseFloat(this.raceElevationGainInput.value)||0,i=parseFloat(this.raceElevationLossInput.value)||0,a=parseFloat(this.userEphInput.value)||0;if(e<=0||a<=0)return void alert("請輸入有效的賽事距離、爬升/下降和您的平均EPH。");const s=60/a,l=this.advancedStrategySection.open,r=parseFloat(this.climbingFactorInput.value)||1,o=parseFloat(this.descendingFactorInput.value)||1,c=[];this.aidStationContainer.querySelectorAll(".aid-station-group").forEach(t=>{const e=parseFloat(t.querySelector(".aid-station-dist").value),n=parseFloat(t.querySelector(".aid-station-time").value);!isNaN(e)&&!isNaN(n)&&e>0&&n>0&&c.push({distance:e,time:n})});let d=0,u="(標準)";!l||1===r&&1===o?d=e+n/100+i/200:(u="(進階)",d=e+n/(100*r)+i/(200*o));let m=d*s;if(l&&c.length>0){m+=c.reduce((t,e)=>t+e.time,0),"(標準)"===u&&(u="(進階-補給站)")}const h=m/60;this.raceTimeDisplay.textContent=t(h)+` ${u}`,this.raceEpDisplay.textContent=`${d.toFixed(1)} ekm`}handleTrainingTimeCalculation(){const a=parseFloat(this.refRaceDistInput.value)||0,s=parseFloat(this.refRaceElevInput.value)||0,l=e(this.refRaceTimeHInput.value,this.refRaceTimeMInput.value,this.refRaceTimeSInput.value),r=parseFloat(this.trainDistInput.value)||0,o=parseFloat(this.trainElevInput.value)||0;if(a<=0||l<=0||r<0)return void alert("請輸入有效的參考賽事數據和訓練距離。");const c=i(n(a,s),l);if(isNaN(c)||!isFinite(c))return void alert("無法計算參考賽事的 EPH，請檢查輸入值。");const d=n(r,o)/c;this.refRaceEphResultDisplay.textContent=c.toFixed(1),this.trainingTimeResultDisplay.textContent=t(d)}handleAddAidStation(){const t=this.aidStationContainer.children.length,e=document.createElement("div");e.className="form-group-inline aid-station-group",e.innerHTML=`\n            <div class="form-group">\n                <label for="aid-dist-${t}" class="form-label">補給站 ${t+1} (km)</label>\n                <input type="number" id="aid-dist-${t}" class="form-control aid-station-dist" placeholder="距離">\n            </div>\n            <div class="form-group">\n                <label for="aid-time-${t}" class="form-label">停留時間 (分)</label>\n                <input type="number" id="aid-time-${t}" class="form-control aid-station-time" placeholder="分鐘">\n            </div>\n            <button class="btn btn-danger btn-small remove-aid-station-btn">&times;</button>\n        `,this.aidStationContainer.appendChild(e),e.querySelector(".remove-aid-station-btn").addEventListener("click",()=>{e.remove()})}saveCurrentTraining(){const t=this.routeNameInput.value.trim()||"未命名訓練",n=parseFloat(this.distanceInput.value),i={date:(new Date).toISOString(),name:t,distance:n,elevation:this.elevationInput.value,time:e(this.targetHoursInput.value,this.targetMinutesInput.value,this.targetSecondsInput.value),eph:parseFloat(this.ephDisplay.textContent)||0,type:"training",shoeId:this.runShoeSelector.value||null};i.distance&&i.time?(!function(t){const e=d();e.push(t);try{localStorage.setItem(c,JSON.stringify(e))}catch(t){console.error("Error saving training history to localStorage",t)}}(i),i.shoeId&&i.distance>0&&(p(i.shoeId,i.distance),this.loadShoes()),this.loadHistory(),alert(`已儲存訓練: ${t}`)):alert("沒有可儲存的有效訓練數據。")}handleExportCard(){const t=this.resDistanceDisplay.textContent,e=this.resElevationDisplay.textContent,n=this.resTimeDisplay.textContent,i=this.ephDisplay.textContent,a=document.createElement("div");a.style.width="400px",a.style.height="400px",a.style.position="absolute",a.style.left="-9999px",a.style.background="#fff",a.style.display="grid",a.style.gridTemplateColumns="1fr 1fr",a.style.gap="10px",a.style.padding="10px",a.style.fontFamily='"Noto Sans SC", sans-serif',a.style.color="rgba(51,51,51,.8)",a.innerHTML=`\n            <div style="text-align:center;display:flex;flex-direction:column;justify-content:center;"><h3 style="margin:0;font-size:1.1em;">距離</h3><p style="font-size:1.3em;font-weight:bold;margin:0;">${t}</p></div>\n            <div style="text-align:center;display:flex;flex-direction:column;justify-content:center;"><h3 style="margin:0;font-size:1.1em;">總爬升</h3><p style="font-size:1.3em;font-weight:bold;margin:0;">${e}</p></div>\n            <div style="text-align:center;display:flex;flex-direction:column;justify-content:center;"><h3 style="margin:0;font-size:1.1em;">用時</h3><p style="font-size:1.3em;font-weight:bold;margin:0;">${n}</p></div>\n            <div style="text-align:center;display:flex;flex-direction:column;justify-content:center;"><h3 style="margin:0;font-size:1.1em;">EPH</h3><p style="font-size:1.3em;font-weight:bold;margin:0;">${i}</p></div>\n        `,document.body.appendChild(a),function(t,e="trail-card.png",n={}){t?html2canvas(t,{backgroundColor:null,scale:2,...n}).then(t=>{const n=document.createElement("a");n.download=e,n.href=t.toDataURL("image/png"),document.body.appendChild(n),n.click(),document.body.removeChild(n)}).catch(t=>{console.error("Error exporting PNG:",t)}):console.error("Element for PNG export not found.")}(a,`TrailSync-Card-${Date.now()}.png`,{width:400,height:400}),setTimeout(()=>document.body.removeChild(a),200)}handleGPXUpload(t){const e=t.target.files[0];if(!e)return;const n=new FileReader;n.onload=t=>{try{const e=function(t){const e=(new DOMParser).parseFromString(t,"text/xml").getElementsByTagName("trkpt");if(e.length<2)return console.error("GPX file must contain at least two trackpoints."),null;let n=0,i=0,a=0;const s=[];for(let t=0;t<e.length;t++){const r=parseFloat(e[t].getAttribute("lat")),o=parseFloat(e[t].getAttribute("lon")),c=e[t].getElementsByTagName("ele")[0],d=c?parseFloat(c.textContent):0;if(s.push({lat:r,lon:o,ele:d}),t>0){const e=s[t-1];n+=l(e,s[t]);const r=d-e.ele;r>0?i+=r:a+=Math.abs(r)}}return{distance:n,elevation:i,descent:a,points:s}}(t.target.result);e?(this.distanceInput.value=e.distance.toFixed(2),this.elevationInput.value=e.elevation.toFixed(0),alert(`GPX 已載入: ${e.distance.toFixed(2)} km, ${e.elevation.toFixed(0)} m`)):alert("無法解析 GPX 檔案。")}catch(t){alert("解析 GPX 檔案時發生錯誤。")}},n.readAsText(e)}clearHistory(){confirm("您確定要清除所有歷史紀錄嗎？")&&(!function(){try{localStorage.removeItem(c)}catch(t){console.error("Error clearing training history from localStorage",t)}}(),localStorage.removeItem(v),this.loadHistory())}handleCopyIntervalResults(){const t=this.intervalResultsList;if(0===t.children.length)return void alert("沒有結果可以複製。");let e="間歇訓練配速解析結果：\n";t.querySelectorAll(".metric-item").forEach(t=>{const n=t.querySelector(".metric-name").textContent.trim(),i=t.querySelector(".metric-value").textContent.trim();e+=`- ${n}: ${i}\n`});const n=this.intervalTotalDistanceDisplay.textContent,i=this.intervalTotalTimeDisplay.textContent;e+=`\n總距離: ${n}\n總時間: ${i}`,navigator.clipboard.writeText(e).then(()=>{alert("結果已複製到剪貼簿！")}).catch(t=>{console.error("無法複製文字: ",t),alert("複製失敗，請檢查瀏覽器權限。")})}}document.addEventListener("DOMContentLoaded",()=>{new B})}();
//# sourceMappingURL=bundle.js.map
